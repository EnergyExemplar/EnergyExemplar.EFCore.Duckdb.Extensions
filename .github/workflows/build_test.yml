name: Build and Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'

# Cancel in-progress runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        configuration: [Debug, Release]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props', '**/paket.lock') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./Source
      
      - name: Build
        run: dotnet build --no-restore --configuration ${{ matrix.configuration }}
        working-directory: ./Source
      
      - name: Test
        run: dotnet test --no-build --verbosity normal --configuration ${{ matrix.configuration }} --collect:"XPlat Code Coverage" --results-directory ../coverage/${{ matrix.configuration }}
        working-directory: ./Tests
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.configuration == 'Release'
        with:
          directory: ./coverage/Release/
          flags: unittests
          name: codecov-pr-${{ github.event.pull_request.number }}
          fail_ci_if_error: false
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.configuration }}
          path: ./coverage/${{ matrix.configuration }}/
      
      - name: Comment PR with test results
        uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            // Get test results summary
            let comment = '## Build and Test Results\n\n';
            comment += `- Configuration: ${{ matrix.configuration }}\n`;
            comment += `- Status: ${{ job.status }}\n`;
            comment += `- Run: [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            
            // Check if this is the first comment or an update
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Build and Test Results') &&
              comment.body.includes(`Configuration: ${{ matrix.configuration }}`)
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore dependencies
        run: dotnet restore --verbosity normal
        working-directory: ./Source
      
      - name: Check for vulnerable packages
        run: dotnet list package --vulnerable
        working-directory: ./Source
      
      - name: Check for outdated packages
        run: dotnet list package --outdated
        working-directory: ./Source
      
      - name: Generate dependency report
        run: |
          echo "## Dependency Analysis Report" > dependency-report.md
          echo "" >> dependency-report.md
          echo "### Vulnerable Packages:" >> dependency-report.md
          dotnet list package --vulnerable >> dependency-report.md 2>&1 || echo "No vulnerable packages found" >> dependency-report.md
          echo "" >> dependency-report.md
          echo "### Outdated Packages:" >> dependency-report.md
          dotnet list package --outdated >> dependency-report.md 2>&1 || echo "No outdated packages found" >> dependency-report.md
        working-directory: ./Source
      
      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-report
          path: ./Source/dependency-report.md

  pr-validation:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: always()
    steps:
      - name: PR Status Summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const jobs = ${{ toJson(needs) }};
            let allPassed = true;
            let summary = '## PR Validation Summary\n\n';
            summary += '| Job | Status |\n';
            summary += '|-----|--------|\n';
            
            for (const [jobName, jobData] of Object.entries(jobs)) {
              const status = jobData.result;
              const emoji = status === 'success' ? '✅' : status === 'failure' ? '❌' : '⚠️';
              summary += `| ${jobName.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} | ${emoji} ${status} |\n`;
              if (status !== 'success') {
                allPassed = false;
              }
            }
            
            summary += '\n';
            summary += allPassed ? '### ✅ All checks passed!' : '### ❌ Some checks failed. Please review the errors above.';
            
            // Find and update or create summary comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const summaryComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Validation Summary')
            );
            
            if (summaryComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: summaryComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
            
            // Set the job status based on all checks
            if (!allPassed) {
              core.setFailed('PR validation failed. Please check the summary above.');
            }