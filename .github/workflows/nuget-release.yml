name: NuGet Release

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      ci_run_id:
        description: "ID of the CI workflow run to pull artifacts from (required for manual run)"
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags
    
    - name: Download Artifacts from CI
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        workflow: ci.yml
        workflow_conclusion: success
        run_id: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ci_run_id || github.event.workflow_run.id }}
        name: nuget-packages
    
    - name: Display structure of downloaded files (debug)
      run: ls -R
    
    - name: Verify NuGet packages exist
      run: |
        packages=$(find . -name "*.nupkg" -type f)
        if [ -z "$packages" ]; then
          echo "Error: No .nupkg files found in downloaded artifacts"
          exit 1
        fi
        echo "Found NuGet packages:"
        echo "$packages"
        
        # Extract version from package name for checking
        for package in $packages; do
          package_name=$(basename "$package" .nupkg)
          version=$(echo "$package_name" | sed 's/.*\.//')
          echo "Package version: $version"
        done
    
    - name: Verify package version and preview suffix
      run: |
        for package in $(find . -name "*.nupkg" -type f); do
          package_name=$(basename "$package")
          # A more robust way to extract version, handles versions like 1.2.3 or 1.2.3-preview
          package_version=$(echo "$package_name" | grep -oP '(?<=\.v)\d+\.\d+\.\d+(?:-preview)?(?=\.nupkg)' || echo "$package_name" | grep -oP '\d+\.\d+\.\d+(?:-preview)?')
          
          echo "Package name: $package_name"
          echo "Extracted version: $package_version"
          
          if [ -z "$package_version" ]; then
            echo "Error: Could not extract version from package name: $package_name"
            exit 1
          fi

          # Verify package has preview suffix
          if [[ "$package_version" != *-preview ]]; then
            echo "Error: Package version does not have required -preview suffix"
            exit 1
          fi
          
          # Check if matching Git tag exists
          if ! git tag -l | grep -q "^$package_version$"; then
            echo "Error: No matching Git tag found for package version $package_version"
            exit 1
          fi
          
          echo "âœ… Verification passed: Package version $package_version matches Git tag and has -preview suffix"
        done
    
    - name: Push package to NuGet.org
      run: dotnet nuget push "**/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
